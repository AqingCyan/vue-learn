(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{169:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"列表渲染细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染细节","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表渲染细节")]),t._v(" "),a("h2",{attrs:{id:"v-for-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-for-指令","aria-hidden":"true"}},[t._v("#")]),t._v(" v-for 指令")]),t._v(" "),a("p",[t._v("当我们涉及到列表渲染数据的时候，不可能做一个重复的工作去不停的一个一个的渲染每一项列表。并且列表数据的表现，比如从后端请求过来的数据，不可能是一个一个的单独的 JSON 数据，通常会是一个数组或者对象。")]),t._v(" "),a("p",[t._v("针对这样的情景，Vue 提供了 "),a("code",[t._v("v-for")]),t._v(" 指令使列表使我们可以根据一组数组的选项列表进行渲染。并且，我们只需要写一个列表元素作为模板就可以通过遍历属性的方式渲染出大量的列表内容。")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("(item, index) of list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{index}} -- {{item}}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("当然，除了列表，也可以通过"),a("code",[t._v("v-for")]),t._v("重复渲染其他元素，这里我们使用"),a("code",[t._v("v-for")]),t._v("重复渲染 div，"),a("code",[t._v('v-for="(item, index) of list"')]),t._v("是一个固定的语法，参数第一项为遍历 list 属性的每一项，参数第二项为遍历 list 时的索引。")]),t._v(" "),a("p",[t._v("🍎除了"),a("code",[t._v("item of items")]),t._v("这种写法，使用"),a("code",[t._v("item in items")]),t._v("也是可以的。(items 是源数据数组并且 item 是数组元素迭代的别名)。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#app"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"and"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aqing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cyan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("渲染时遍历的源数据，通常为一个对象或者数组，在遍历不同类型的数据时，"),a("code",[t._v("in")]),t._v(" 与 "),a("code",[t._v("of")]),t._v(" 也要区别使用。")])]),t._v(" "),a("h2",{attrs:{id:"拓展：vue-数组数据的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展：vue-数组数据的修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 拓展：Vue 数组数据的修改")]),t._v(" "),a("p",[t._v("现在页面有 5 个数据，我们在控制台 vm.list[5] = '123'，添加一条数据，发现 vm.list 虽然多了一条数据，但页面没有响应式的变化。")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Vue 中对数组的操作有限定的 api，使用它们才能让页面有响应式的变化：pop、push、shift、unshift、splice、sort、reverse。")])]),t._v(" "),a("p",[t._v("🍺当然，除了以上的方式，我们还可以通过直接修改数组引用的方式来促使页面重新渲染，\n该方法也适用于对象，若直接通过键值对的方式增加减少修改对象，虽然对象的数据变化，页面也不会有响应式的变化，所以通过修改引用，让绑定在页面的对象指向新的对象就能使页面重新渲染。")]),t._v(" "),a("p",[t._v("🎨而针对以上情况，还有 set 方法可以使用，\n"),a("code",[t._v("Vue.set")]),t._v(" 全局方法 "),a("code",[t._v("vm.$set")]),t._v(" 实例方法都可以\n比如在控制台输入 "),a("code",[t._v("Vue.set(vm.list, 1, 'node.js')")]),t._v(" 或者 "),a("code",[t._v("vm.$set(vm.list, 1, 'node.js')")]),t._v(" 看看第二个元素的变化。")])])}],!1,null,null,null);s.default=e.exports}}]);